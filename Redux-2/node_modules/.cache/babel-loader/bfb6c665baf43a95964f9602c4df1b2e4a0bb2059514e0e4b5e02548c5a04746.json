{"ast":null,"code":"//import React from \"react\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nconst initialState = {\n  isCart: false,\n  items: [],\n  totalQuantity: 0,\n  isNotification: null\n};\nconst cartStore = createSlice({\n  name: 'CART',\n  initialState,\n  reducers: {\n    replace(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    setCart(state) {\n      state.isCart = true;\n    },\n    closeCart(state) {\n      state.isCart = false;\n    },\n    addItemToCart(state, action) {\n      const newItems = action.payload;\n      const existingItem = state.items.find(item => item.id === newItems.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItems.id,\n          price: newItems.price,\n          quantity: 1,\n          totalPrice: newItems.price,\n          name: newItems.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n    itemStatus(state, action) {\n      state.isNotification = {\n        status: action.payload.status,\n        title: action.payload.title,\n        message: action.payload.message\n      };\n    }\n  }\n});\nexport const fetchData = () => {\n  return dispatch => {\n    const fetchData = async () => {\n      const response = await fetch(\"https://expensetreacker-default-rtdb.firebaseio.com/cart.json\");\n      if (response.ok) {}\n      const data = await response.json();\n    };\n  };\n};\nconst store = configureStore({\n  reducer: cartStore.reducer\n});\nexport default store;\nexport const cartState = cartStore.actions;","map":{"version":3,"names":["configureStore","createSlice","useDispatch","initialState","isCart","items","totalQuantity","isNotification","cartStore","name","reducers","replace","state","action","payload","setCart","closeCart","addItemToCart","newItems","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","itemStatus","status","message","fetchData","dispatch","response","fetch","ok","data","json","store","reducer","cartState","actions"],"sources":["C:/Users/ddeco/Downloads/Redux1/Redux2/src/ReduxStore/Redux.js"],"sourcesContent":["//import React from \"react\";\r\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\n\r\n\r\nconst initialState = {isCart:false, items : [], totalQuantity:0, isNotification : null}\r\nconst cartStore = createSlice({\r\n    name:'CART',\r\n    initialState,\r\n    reducers :{\r\n         replace(state,action){\r\n          state.totalQuantity = action.payload.totalQuantity\r\n          state.items = action.payload.items\r\n         },\r\n        setCart(state){\r\n          state.isCart = true\r\n        },\r\n        closeCart(state){\r\n            state.isCart= false\r\n        },\r\n        addItemToCart(state,action){\r\n          const newItems = action.payload\r\n          const existingItem = state.items.find((item) =>item.id===newItems.id)\r\n          state.totalQuantity++\r\n          if(!existingItem){\r\n            state.items.push({\r\n              id : newItems.id,\r\n              price: newItems.price,\r\n              quantity:1,\r\n              totalPrice: newItems.price,\r\n              name:newItems.title\r\n            })\r\n          }\r\n          else {\r\n            existingItem.quantity++\r\n            existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\r\n          }\r\n\r\n        },\r\n        removeItemFromCart(state,action){\r\n             const id = action.payload\r\n             const existingItem = state.items.find((item) => item.id ===id)\r\n             state.totalQuantity--\r\n             \r\n             if(existingItem.quantity===1){\r\n                 state.items = state.items.filter(item => item.id!==id)\r\n             }\r\n             else{\r\n              existingItem.quantity--\r\n              existingItem.totalPrice = existingItem.totalPrice - existingItem.price\r\n             }\r\n        },\r\n        itemStatus(state,action){\r\n           state.isNotification = {\r\n                  status : action.payload.status,\r\n                  title  : action.payload.title,\r\n                  message:  action.payload.message\r\n           }\r\n        }\r\n    }\r\n\r\n})\r\n\r\n\r\n\r\nexport const fetchData = () =>{\r\n return (dispatch)=>{\r\n   const fetchData = async()=>{\r\n    const response = await fetch(\"https://expensetreacker-default-rtdb.firebaseio.com/cart.json\")\r\n    if(response.ok){\r\n\r\n    }\r\n\r\n    const data = await response.json()\r\n   }\r\n }\r\n  \r\n}\r\n\r\nconst store = configureStore({\r\n  reducer : cartStore.reducer\r\n})\r\n\r\nexport default store\r\n\r\nexport const cartState = cartStore.actions"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}